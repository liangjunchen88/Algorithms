Runtime
425 ms
Beats
38.64%
Memory
31.8 MB
Beats
36.83%

class TrieNode:
    def __init__(self):
        self.word = False
        self.child = {}


class Trie:

    def __init__(self):
        self.root = TrieNode()
        

    def insert(self, word: str) -> None:
        node = self.root
        for c in word:
            if c not in node.child:
                node.child[c] = TrieNode()
            node = node.child[c]
        node.word = True
        

    def search(self, word: str) -> bool:
        node = self.root
        for c in word:
            if c not in node.child:
                return False
            node = node.child[c]
        return node.word
        

    def startsWith(self, prefix: str) -> bool:
        node = self.root
        for c in prefix:
            if c not in node.child:
                return False
            node = node.child[c]
        return True


# # Your Trie object will be instantiated and called as such:
# # obj = Trie()
# # obj.insert(word)
# # param_2 = obj.search(word)
# # param_3 = obj.startsWith(prefix)
