Runtime
48 ms
Beats
97.98%
Memory
13.9 MB
Beats
48.62%

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:

        if not grid:
            return 0
        
        time = 0
        nRow = len(grid)
        nCol = len(grid[0])
        rottens = []
        for i in range(nRow):
                for j in range(nCol):
                    if grid[i][j] == 2:
                        rottens.append((i,j))

        while True:
            newRottens = []
            change  = 0
            for r in rottens:
                i,j = r

                if i+1>=0 and i+1<nRow and grid[i+1][j]==1:
                    grid[i+1][j] = 2
                    newRottens.append((i+1,j))
                    change = 1
                if i-1>=0 and i-1<nRow and grid[i-1][j]==1:
                    grid[i-1][j] = 2
                    newRottens.append((i-1,j))
                    change = 1
                if j+1>=0 and j+1<nCol and grid[i][j+1]==1:
                    grid[i][j+1] = 2
                    newRottens.append((i,j+1))
                    change = 1
                if j-1>=0 and j-1<nCol and grid[i][j-1]==1:
                    grid[i][j-1] = 2
                    newRottens.append((i,j-1))
                    change = 1
            rottens = newRottens
            if change == 0:
                break
            time += 1


        for i in range(nRow):
            for j in range(nCol):
                if grid[i][j] == 1:
                    return -1
        
        return time
