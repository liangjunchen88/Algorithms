# Runtime: 80 ms, faster than 97.46% of Python3 online submissions for Insert Interval.
# Memory Usage: 17.6 MB, less than 5.98% of Python3 online submissions for Insert Interval.

class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
    
    # 1. 
        s, e = newInterval[0], newInterval[1]
        left = [i for i in intervals if i[1] < s]
        right = [j for j in intervals if j[0] > e]
        if left + right != intervals:
            s = min(intervals[len(left)][0], s)
            e = max(intervals[~len(right)][1], e)
        return left + [[s, e]] + right


    # 2.
        # if intervals == []:
        #     return [newInterval]
        # if newInterval == []:
        #     return intervals
        # left = [i for i in intervals if i[1]<newInterval[0]]
        # right = [i for i in intervals if i[0]>newInterval[1]]
        # if len(left) > len(intervals)-1:
        #     s = newInterval[0]
        # else:
        #     s = min(newInterval[0],intervals[len(left)][0])
        # if len(right) > len(intervals)-1:
        #     e = newInterval[1]
        # else:
        #     e = max(newInterval[1],intervals[-(len(right)+1)][1])
        # merge = [s, e]
        # return left+[merge]+right
