#1 dp 
Runtime
3637 ms
Beats
24.20%
Memory
22 MB
Beats
10.69%

#2 imporved dp
Runtime
1220 ms
Beats
66.77%
Memory
14.2 MB
Beats
19.70%

class Solution:
    def longestPalindrome(self, s: str) -> str:
        #1
        dp = []
        longest = s[0]
        for i in range(len(s)):
            temp = [False]*len(s)
            dp.append(temp)
        for i in range(len(s)):
            dp[i][i] = True
            if i < len(s)-1:
                if s[i] == s[i+1]:
                    dp[i][i+1] = True
                    longest = s[i:i+2]
        len_longest = len(longest)
        
        for j in range(2,len(s)):
            for i in range(len(s)-j):
                if dp[i+1][i+j-1] and s[i] == s[i+j]:
                    dp[i][i+j] = True
                    if j+1 > len_longest:
                        longest = s[i:i+j+1]
                        len_longest = j+1
        return longest
        
        
        #2
        def longestPalindrome(self, s: str) -> str:
            if not s:
                return ""
            table = []
            res = s[0]
            length = 1
            for i in range(len(s)):
                table.append((i,i))
                if i<len(s)-1 and s[i] == s[i+1]:
                    table.append((i,i+1))
                    res = s[i:i+2]
                    length = 2

            while table:
                i,j = table.pop()
                if j-i+1 > length:
                    res = s[i:j+1]
                    length = j-i+1
                if i-1>=0 and j+1<len(s) and s[i-1]==s[j+1]:
                    table.append((i-1,j+1))
        return res
        

