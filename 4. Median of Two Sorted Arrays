Runtime
99 ms
Beats
77.83%
Memory
14.1 MB
Beats
96.89%

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        l = (len(nums1) + len(nums2))
        if l % 2 == 1:
            return self.findKth(nums1, nums2, l//2)
        else:
            return (self.findKth(nums1, nums2, l//2)+self.findKth(nums1, nums2, l//2-1)) / 2

    def findKth(self, nums1, nums2, k):
        if not nums1:
            return nums2[k]
        if not nums2:
            return nums1[k]
        index_1 = len(nums1) // 2
        index_2 = len(nums2) // 2
        median_1 = nums1[index_1]
        median_2 = nums2[index_2]

        if index_1+index_2<k:
            if median_1 > median_2:
                return self.findKth(nums1, nums2[index_2+1:], k-index_2-1)
            else:
                return self.findKth(nums1[index_1+1:], nums2, k-index_1-1)
        else:
            if median_1 > median_2:
                return self.findKth(nums1[:index_1], nums2, k)
            else:
                return self.findKth(nums1, nums2[:index_2],k)
