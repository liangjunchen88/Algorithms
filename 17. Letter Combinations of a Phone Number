Runtime
28 ms
Beats
96.34%
Memory
13.9 MB
Beats
80.6%

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        
        digit_map = {}
        digit_map['2'] = ['a', 'b', 'c']
        digit_map['3'] = ['d', 'e', 'f']
        digit_map['4'] = ['g', 'h', 'i']
        digit_map['5'] = ['j', 'k', 'l']
        digit_map['6'] = ['m', 'n', 'o']
        digit_map['7'] = ['p', 'q', 'r', 's']
        digit_map['8'] = ['t', 'u', 'v']
        digit_map['9'] = ['w','x', 'y', 'z']

        res = []
        for letter in digit_map[digits[0]]:
            res.append(letter)
        for i in range(1, len(digits)):
            temp = []
            num = digits[i]
            for s in res:
                for letter in digit_map[num]:
                    temp.append(s+letter)
            res = temp
        return res
