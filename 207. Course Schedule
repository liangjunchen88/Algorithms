# Runtime: 95 ms, faster than 98.79% of Python3 online submissions for Course Schedule.
# Memory Usage: 16.5 MB, less than 65.14% of Python3 online submissions for Course Schedule.

class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        graph = [[] for i in range(numCourses)]
        visit = [0]*numCourses
        for x, y in prerequisites:
            graph[x].append(y)
        for i in range(numCourses):
            if not self.dfs(graph, visit, i):
                return False
        return True
    
    def dfs(self, graph, visit, node):
        if visit[node] == 1:
            return True
        elif visit[node] == -1:
            return False
        visit[node] = -1
        for n in graph[node]:
            if not self.dfs(graph, visit, n):
                return False
        visit[node] = 1
        return True
