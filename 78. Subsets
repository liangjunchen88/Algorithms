Runtime
64 ms
Beats
49.86%
Memory
14.2 MB
Beats
36.63%

#1 backtrack
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        def backtrack(len_subset, start = 0, cur=[]):
            if len(cur)==len_subset:
                output.append(cur[:])
                return
            for i in range(start, len(nums)):
                cur.append(nums[i])
                backtrack(len_subset, i+1, cur)
                cur.pop()
        
        output = []
        for i in range(len(nums)+1):
            backtrack(i)
        return output

#2 dfs
class Solution(object):
    def subsets(self, nums):
        res = []
        self.dfs(nums, [], res)
        return res
    
    def dfs(self, nums, path, res):
        res.append(path)
        for i in range(len(nums)):
            self.dfs(nums[i+1:], path+[nums[i]], res)
