Runtime
46 ms
Beats
87.51%
Memory
14.2 MB
Beats
56.3%

class Solution:
    def search(self, nums, target):
        if not nums:
            return -1
        pivot = self.find_rotated(nums, 0, len(nums)-1)
        print(pivot)
        if pivot == 0:
            return self.binary_search(nums, 0, len(nums)-1, target)
        if target == nums[0]:
            return 0
        if target > nums[0]:
            return self.binary_search(nums, 0, pivot - 1, target)
        else:
            return self.binary_search(nums, pivot, len(nums)-1, target)

    def find_rotated(self, nums, left, right):
        if nums[left] < nums[right]:
            return 0

        while left <= right:
            pivot = (left + right) // 2
            if pivot == len(nums) - 1:
                return pivot
            if nums[pivot] > nums[pivot + 1]:
                return pivot + 1
            else:
                if nums[pivot] < nums[left]:
                    right = pivot - 1
                else:
                    left = pivot + 1

    def binary_search(self, nums, left, right, target):
        if left > right:
            return -1

        while left <= right:
            middle = (left + right) // 2
            if target == nums[middle]:
                return middle
            elif target > nums[middle]:
                left = middle+1
            else:
                right = middle-1

        return -1
