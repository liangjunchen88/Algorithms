# Runtime: 1922 ms, faster than 18.53% of Python3 online submissions for K Closest Points to Origin.
# Memory Usage: 20.4 MB, less than 61.77% of Python3 online submissions for K Closest Points to Origin.

import heapq
class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        heap = []
        for (x, y) in points:
            dis = - x**2 - y**2
            if len(heap) == k:
                heapq.heappushpop(heap,(dis,x,y))
            else:
                heapq.heappush(heap, (dis,x,y))
        return [(x,y) for (dis,x,y) in heap]



# Runtime: 1873 ms, faster than 21.51% of Python3 online submissions for K Closest Points to Origin.
# Memory Usage: 20.3 MB, less than 61.77% of Python3 online submissions for K Closest Points to Origin.

# import heapq
# class Solution:
#     def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
#         points.sort(key = lambda P: P[0]**2 + P[1]**2)
#         return points[:k]
