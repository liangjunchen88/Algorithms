# Runtime: 59 ms, faster than 91.50% of Python3 online submissions for Linked List Cycle.
# Memory Usage: 17.6 MB, less than 66.78% of Python3 online submissions for Linked List Cycle.

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        try:
            slow = head
            fast = head.next
            while slow is not fast:
                slow = slow.next
                fast = fast.next.next
            return True
        except:
            return False
            
method 2
# Runtime: 130 ms, faster than 10.74% of Python3 online submissions for Linked List Cycle.
# Memory Usage: 17.4 MB, less than 94.20% of Python3 online submissions for Linked List Cycle.

# class Solution:
#     def hasCycle(self, head: Optional[ListNode]) -> bool:
#         slow = head
#         fast = head
#         while fast != None and fast.next != None:
#             slow = slow.next
#             fast = fast.next.next
#             if slow == fast:
#                 return True
#         return False
